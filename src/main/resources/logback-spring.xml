<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds">
<!--springProfile 태그를 사용하면 logback 설정파일에서 복수개의 프로파일을 설정할 수 있다. -->

	<!--Environment 내의 프로퍼티들을 개별적으로 설정할 수도 있다. -->
	<springProperty scope="context" name="LOG_LEVEL" source="logging.level.root" />
	
	<!-- log file path -->
	<property name="LOG_PATH" value="/Dev/Logs/DBee" />
	<!-- log file name -->
	<property name="LOG_FILE_NAME" value="log" />
	<!-- err log file name -->
	<property name="ERR_LOG_FILE_NAME" value="err_log" />
	<!-- pattern value = %-5level %d{yy-MM-dd HH:mm:ss}[%thread] [%logger{0}:%line] - %msg%n -->
	<property name="LOG_PATTERN" value="%green(%d{yy-MM-dd HH:mm:ss}) %highlight(%-5level) %boldCyan([%logger{0}:%line]) %msg%n" />
	
	
	<!-- Console Appender -->
	<appender name="CONSOLE"
		class="ch.qos.logback.core.ConsoleAppender">
		<encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
			<pattern>${LOG_PATTERN}</pattern>
		</encoder>
	</appender>

	<!-- root레벨 설정 -->
	<root level="${LOG_LEVEL}">
		<appender-ref ref="CONSOLE"/>

	</root>
	
	<!-- 특정패키지 로깅레벨 설정 -->
	<logger name="org.apache.ibatis" level="DEBUG" additivity="false">
		<appender-ref ref="CONSOLE"/>

	</logger>

	<!-- log4jdbc 로깅레벨 설정 -->
	<logger name="jdbc" level="OFF" /> 
	
	<!-- 커넥션 open close 이벤트를 로그로 남긴다. -->
	<logger name="jdbc.connection" level="OFF" /> 
	
	<!-- SQL문만을 로그로 남기며, PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다. -->
	<logger name="jdbc.sqlonly" level="DEBUG" /> 
	
	<!-- SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다. -->
	<logger name="jdbc.sqltiming" level="OFF" /> 
	
	<!-- ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. -->
	<logger name="jdbc.audit" level="OFF" /> 
	
	<!-- ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다. -->
	<logger name="jdbc.resultset" level="OFF" /> 
	
	<!-- SQL 결과 조회된 데이터의 table을 로그로 남긴다. -->
	<logger name="jdbc.resultsettable" level="DEBUG" />
	
</configuration>